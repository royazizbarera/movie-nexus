// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Country model
model Country {
  code   String  @id
  label  String
  phone  String
  actors Actor[]
  awards Award[]
  movies Movie[]
}

// Genre model
model Genre {
  id     Int           @id @default(autoincrement())
  name   String
  movies MovieGenres[]
}

// Award model
model Award {
  id          Int           @id @default(autoincrement())
  name        String
  year        Int
  country     Country       @relation(fields: [countryCode], references: [code])
  countryCode String
  movies      MovieAwards[]
}

// Actor model
model Actor {
  id          Int           @id @default(autoincrement())
  name        String
  birthdate   DateTime
  country     Country       @relation(fields: [countryCode], references: [code])
  countryCode String
  movies      MovieActors[]
}

// Movie model
model Movie {
  id              Int      @id @default(autoincrement())
  title           String
  synopsis        String
  posterUrl       String
  releaseDate    DateTime
  approvalStatus Boolean
  rating          Float
  director        String

  // relationship
  country     Country       @relation(fields: [countryCode], references: [code])
  countryCode String
  actors      MovieActors[]
  genres      MovieGenres[]
  awards      MovieAwards[]
  reviews     Review[]
}

// Tabel relasi many-to-many antara Actor dan Movie
model MovieActors {
  actor   Actor @relation(fields: [actorId], references: [id])
  actorId Int
  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int

  @@id([actorId, movieId]) // Primary key gabungan
}

// Tabel relasi many-to-many antara Genre dan Movie
model MovieGenres {
  genre   Genre @relation(fields: [genreId], references: [id])
  genreId Int
  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int

  @@id([genreId, movieId]) // Primary key gabungan
}

// Table relasi many-to-many antara Movie dan Award
model MovieAwards {
  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int
  award   Award @relation(fields: [awardId], references: [id])
  awardId Int

  @@id([movieId, awardId]) // Primary key gabungan
}

// Review model
model Review {
  id      Int    @id @default(autoincrement())
  content String
  rating  Int
  movieId Int
  movie   Movie  @relation(fields: [movieId], references: [id])
  userId  Int
  user    User   @relation(fields: [userId], references: [id])
}

// User model
model User {
  id           Int      @id @default(autoincrement())
  username     String
  password     String
  photoProfile String?
  provider     String?
  reviews      Review[]
}
