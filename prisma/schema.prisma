// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Country model
model Country {
  code     String     @id
  name     String
  actors   Actor[]
  awards   Award[]
  movies   Movie[]
  Director Director[]
}

// Genre model
model Genre {
  id     Int           @id @default(autoincrement())
  name   String
  movies MovieGenres[]
}

// Award model
model Award {
  id          Int           @id @default(autoincrement())
  name        String
  year        DateTime
  country     Country       @relation(fields: [countryCode], references: [code])
  countryCode String
  movies      MovieAwards[]
}

// Actor model
model Actor {
  id          Int           @id @default(autoincrement())
  name        String
  birthDate   DateTime
  photoUrl    String?
  country     Country       @relation(fields: [countryCode], references: [code])
  countryCode String
  movies      MovieActors[]
}

model Director {
  id          Int      @id @default(autoincrement())
  name        String
  birthDate   DateTime
  photoUrl    String?
  country     Country  @relation(fields: [countryCode], references: [code])
  countryCode String
  movies      Movie[]
}

// Movie model
model Movie {
  id             Int      @id @default(autoincrement())
  title          String
  synopsis       String
  posterUrl      String
  backdropUrl    String
  videoUrl       String?
  releaseDate    DateTime
  approvalStatus Boolean
  rating         Float?

  // relationship
  country     Country?       @relation(fields: [countryCode], references: [code])
  countryCode String?
  director    Director?      @relation(fields: [directorId], references: [id])
  directorId  Int?
  actors      MovieActors[]
  genres      MovieGenres[]
  awards      MovieAwards[]
  reviews     MovieReviews[]
}

// Tabel relasi many-to-many antara Actor dan Movie
model MovieActors {
  actor   Actor @relation(fields: [actorId], references: [id])
  actorId Int
  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int

  @@id([movieId, actorId]) // Primary key gabungan
}

// Table rela

// Tabel relasi many-to-many antara Genre dan Movie
model MovieGenres {
  genre   Genre @relation(fields: [genreId], references: [id])
  genreId Int
  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int

  @@id([movieId, genreId]) // Primary key gabungan
}

// Table relasi many-to-many antara Movie dan Award
model MovieAwards {
  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int
  award   Award @relation(fields: [awardId], references: [id])
  awardId Int

  @@id([movieId, awardId]) // Primary key gabungan
}

// Review model
model Review {
  id      Int            @id @default(autoincrement())
  content String
  rating  Int
  user    User           @relation(fields: [userId], references: [id])
  userId  Int
  movies  MovieReviews[]
}

model MovieReviews {
  movieId  Int
  reviewId Int

  movie  Movie  @relation(fields: [movieId], references: [id])
  review Review @relation(fields: [reviewId], references: [id])
  userId Int // Tambahkan userId agar 1 user hanya bisa review 1 kali per movie

  @@id([movieId, reviewId]) // Primary key gabungan
  @@unique([movieId, userId]) // Unique constraint untuk memastikan 1 user hanya review 1 kali per movie
}

// User model
model User {
  id                      Int       @id @default(autoincrement())
  username                String
  email                   String    @unique
  password                String?
  photoProfile            String?
  provider                String?   @default("email")
  role                    String?   @default("writer")
  isVerified              Boolean   @default(false)
  verificationCode        String?
  verificationCodeExpired DateTime? @default(dbgenerated("now() + interval '1 day'"))
  verificationRequestDate DateTime? @default(now())
  reviews                 Review[]
}
